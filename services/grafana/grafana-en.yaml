heat_template_version: rocky
description: grafana
parameter_groups:
- label: General
  description: General parameters
  parameters:
  - key
  - flavor_grafana
  - influx_db
  - local_net
  - public_access
  - availability_zone
- label: backup
  description: backup parameters
  parameters:
  - backup
  - backup_days
parameters:
  key:
    type: string
    description: Key pair name (If you see nothing you need to first create a key
      under SSH-KEY)
    constraints:
    - custom_constraint: nova.keypair
  local_net:
    label: Local network
    type: string
    description: The local network you want the server to be attached on (If you see
      nothing you need to first create a local network)
    default: local
    constraints:
    - custom_constraint: neutron.network
  flavor_grafana:
    label: Grafana Instance Flavor
    type: string
    description: Flavor to be used for the instance
    default: gp.4x8
    constraints:
    - custom_constraint: nova.flavor
  availability_zone:
    label: Availability zone
    default: europe-se-1a
    description: The Availability Zone to launch the instance. Available options are
      europe-se-1a and europe-se-1b
    type: string
  backup:
    label: Backup
    type: boolean
    default: false
    description: Backup of all volumes
  backup_days:
    label: Backup days
    type: number
    default: 10
    description: Days backup will be saved before deleted
  public_access:
    label: Public Access
    type: boolean
    default: false
    description: This option will give the instance public IP access
  influx_db:
    label: InfluxDB
    type: boolean
    default: false
    description: This will setup a Influxdb2 on the instance
conditions:
  backup_res:
    not:
      equals:
      - get_param: backup
      - false
  public_res:
    not:
      equals:
      - get_param: public_access
      - false
  influxdb_res:
    not:
      equals:
      - get_param: influx_db
      - false
resources:
  port:
    type: OS::Neutron::Port
    properties:
      name:
        get_param: OS::stack_name
      network:
        get_param: local_net
      security_groups:
      - get_resource: sec_ssh_grafana
      - get_resource: sec_grafana_grafana
  grafana_float_ip:
    type: OS::Neutron::FloatingIP
    condition: public_res
    properties:
      floating_network:
        list_join:
        - '-'
        - - str_replace:
              template:
                get_param: availability_zone
              params:
                se-1: se-1-1
          - net0
  grafana_float_assoc:
    type: OS::Neutron::FloatingIPAssociation
    condition: public_res
    properties:
      floatingip_id:
        get_resource: grafana_float_ip
      port_id:
        get_resource: port
  grafanaconfig:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        package_update: true
        package_upgrade: true
        packages:
        - gnupg2
        - curl
        - software-properties-common
        package_reboot_if_required: true
        ssh_pwauth: false
        chpasswd:
          expire: false
        password:
          get_resource: ubuntu_password
        write_files:
        - path: /etc/grafana/provisioning/datasources/influxdb.yaml
          permissions: 493
          content:
            str_replace:
              template: "apiVersion: 1\n\ndatasources:\n  - name: InfluxDB_v2_Flux\n
                \   type: influxdb\n    access: proxy\n    url: http://!IP!:8086\n
                \   jsonData:\n      version: Flux\n      organization: default\n
                \     defaultBucket: default\n      tlsSkipVerify: true\n    secureJsonData:\n
                \     token: TOKEN\n"
              params:
                '!IP!':
                  get_attr:
                  - port
                  - fixed_ips
                  - 0
                  - ip_address
        runcmd:
          if:
          - influxdb_res
          - - wget -q https://repos.influxdata.com/influxdb.key
            - echo '23a1c8836f0afc5ed24e0486339d7cc8f6790b83886c4c96995b88a061c5bb5d
              influxdb.key' | sha256sum -c && cat influxdb.key | gpg --dearmor | sudo
              tee /etc/apt/trusted.gpg.d/influxdb.gpg > /dev/null
            - echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdb.gpg] https://repos.influxdata.com/debian
              stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list
            - sudo apt-get update && sudo apt-get install influxdb2 -y
            - systemctl restart influxdb
            - systemctl start influxdb
            - influx setup -u admin -p !DBPASS! -b default -o default --force
            - str_replace:
                template: influx setup -u admin -p !DBPASS! -b test -o test --force
                params:
                  '!DBPASS!':
                    get_resource: db_password
            - curl -fsSL https://packages.grafana.com/gpg.key|sudo gpg --dearmor -o
              /etc/apt/trusted.gpg.d/grafana.gpg
            - sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable
              main" -y
            - apt update
            - apt -y install grafana
            - systemctl enable --now grafana-server
            - output=$(influx auth list | grep Token | awk '{print $4}' | grep -v
              "User") && sed -i "s/TOKEN/$output/g" /etc/grafana/provisioning/datasources/influxdb.yaml
          - - curl -fsSL https://packages.grafana.com/gpg.key|sudo gpg --dearmor -o
              /etc/apt/trusted.gpg.d/grafana.gpg
            - sudo add-apt-repository "deb https://packages.grafana.com/oss/deb stable
              main" -y
            - apt update
            - apt -y install grafana
            - systemctl enable --now grafana-server
  grafanserver:
    type: OS::Nova::Server
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - grafana
      flavor:
        get_param: flavor_grafana
      networks:
      - port:
          get_resource: port
      key_name:
        get_param: key
      block_device_mapping:
      - device_name: vda
        delete_on_termination: true
        volume_id:
          get_resource: root_volume
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: grafanaconfig
  sec_grafana_grafana:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - grafana
      rules:
      - protocol: tcp
        port_range_min: 3000
        port_range_max: 3000
        remote_ip_prefix: 0.0.0.0/0
  sec_ssh_grafana:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - ssh
      rules:
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0
  root_volume:
    type: OS::Cinder::Volume
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - grafana
      size: 20
      volume_type: ssd
      image: ubuntu-jammy-22-x86_64
  ubuntu_password:
    type: OS::Heat::RandomString
    properties:
      length: 7
      salt:
        get_param: OS::stack_name
  db_password:
    type: OS::Heat::RandomString
    properties:
      length: 9
      salt:
        get_param: OS::stack_name
  cron_name:
    type: OS::Heat::RandomString
    condition: backup_res
    properties:
      salt:
        get_param: OS::stack_name
  volume_backup:
    type: OS::Mistral::CronTrigger
    condition: backup_res
    properties:
      name:
        str_replace:
          template: gitlab-root-$name
          params:
            $name:
              get_attr:
              - cron_name
              - value
      pattern: 0 0 * * *
      workflow:
        name: 370a2bfd-4013-457b-b214-d06a510ce74c
        input:
          volume_id:
            get_resource: root_volume
          incremental: false
          force: true
          container: volumebackups
          delete_backups_whose_age_more_than_or_equal_days:
            get_param: backup_days
outputs:
  ubuntu_password:
    description: Password for Ubuntu user
    value:
      get_resource: ubuntu_password
  WebGui_local:
    description: grafna link
    value:
      str_replace:
        template: http://host:3000
        params:
          host:
            get_attr:
            - grafanserver
            - first_address
  WebGui_public:
    condition: public_res
    description: grafna link
    value:
      str_replace:
        template: http://host:3000
        params:
          host:
            get_attr:
            - grafana_float_ip
            - floating_ip_address
  webgui:
    description: webgui credentials
    value: user:admin pass:admin
  influxdb_password:
    condition: influxdb_res
    description: user admin password to auth to influxdb
    value:
      get_resource: db_password
