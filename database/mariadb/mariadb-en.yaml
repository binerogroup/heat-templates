heat_template_version: rocky
description: Maraiadb
parameter_groups:
- label: General
  dscription: General parameters
  parameters:
  - key
  - db_flavor
  - db_dump
  - replication
  - local_net
  - availability_zone
  - disk_type
  - backup
  - backup_days
parameters:
  key:
    type: string
    description: Key pair name (If you see nothing you need to first create a key
      under SSH-KEY)
    constraints:
    - custom_constraint: nova.keypair
  local_net:
    label: Local network
    type: string
    description: The local network you want the server to be attached on (If you see
      nothing you need to first create a local netowrok)
    default: local
    constraints:
    - custom_constraint: neutron.network
  db_flavor:
    label: Instance Flavor
    type: string
    description: Flavor to be used for the dbserver
    default: gp.4x8
    constraints:
    - custom_constraint: nova.flavor
  replication:
    label: Replication
    type: boolean
    default: false
    description: If checked a second db instance will be created that will read/replicate
      from primary db instance.
  db_dump:
    label: Database dump
    type: boolean
    default: false
    description: This option will dump all your databases daily on primary instance
      at 06.25 into folder /home/ubuntu/sql_dump
  availability_zone:
    label: Availability zone
    default: europe-se-1a
    description: The Availability Zone to launch the instance. Available options are
      europe-se-1a and europe-se-1b
    type: string
  disk_type:
    label: Disk type ssd or hdd
    type: string
    default: ssd
    description: null
  backup:
    label: Backup
    type: boolean
    default: false
    description: Backup of all volumes
  backup_days:
    label: Backup days
    type: number
    default: 10
    description: Days backup will be saved before deleted
conditions:
  create_repdb_res:
    not:
      equals:
      - get_param: replication
      - false
  db_dump_res:
    not:
      equals:
      - get_param: db_dump
      - false
  backup_res:
    not:
      equals:
      - get_param: backup
      - false
resources:
  repl_password:
    type: OS::Heat::RandomString
    condition: create_repdb_res
    properties:
      salt:
        get_param: OS::stack_name
  dbconfig:
    type: OS::Heat::CloudConfig
    condition:
      equals:
      - get_param: replication
      - false
    properties:
      cloud_config:
        package_upgrade: true
        packages:
        - mariadb-server
        package_update: true
        package_reboot_if_required: true
        ssh_pwauth: false
        chpasswd:
          expire: false
        password: ubuntu
        write_files:
          if:
          - db_dump_res
          - - path: /etc/cron.daily/sqldump
              permissions: 493
              content: '#!/bin/bash


                TIMESTAMP=$(date +"%F")

                BACKUP_DIR="/home/ubuntu/sql_dump/"

                MYSQL_USER="root"

                MYSQL=/usr/bin/mysql

                MYSQL_PASSWORD="password"

                MYSQLDUMP=/usr/bin/mysqldump

                mkdir -p "$BACKUP_DIR"

                databases=`$MYSQL --user=$MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW DATABASES;"
                | grep -Ev "(Database|mysql|sys|information_schema|performance_schema)"`

                for db in $databases; do

                $MYSQLDUMP --single-transaction --routines --triggers --force --opt
                --user=$MYSQL_USER -p$MYSQL_PASSWORD --databases $db | gzip > "$BACKUP_DIR/"$db"_"$TIMESTAMP"_.gz"

                done

                '
            - path: /etc/cron.daily/sql_dump_clenup
              permissions: 493
              content: '#!/bin/bash

                /usr/bin/find /home/ubuntu/sql_dump/ -mtime +30 -name "*.gz" -exec
                /bin/rm {} \;

                '
          - - path /etc/tmp/test
        runcmd:
        - mkdir /home/ubuntu/sql_dump
  dbserver:
    type: OS::Nova::Server
    condition:
      equals:
      - get_param: replication
      - false
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - db
      flavor:
        get_param: db_flavor
      block_device_mapping:
      - device_name: vda
        delete_on_termination: true
        volume_id:
          get_resource: root_volume
      networks:
      - network:
          get_param: local_net
      security_groups:
      - get_resource: sec_ssh
      - get_resource: sec_sql
      key_name:
        get_param: key
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: dbconfig
  repdbprimaryconfig:
    type: OS::Heat::CloudConfig
    depends_on:
    - primary_port
    condition: create_repdb_res
    properties:
      cloud_config:
        package_upgrade: true
        packages:
        - mariadb-server
        package_update: true
        package_reboot_if_required: true
        ssh_pwauth: false
        chpasswd:
          expire: false
        password: ubuntu
        write_files:
          if:
          - db_dump_res
          - - path: /etc/cron.daily/sqldump
              permissions: 493
              content: '#!/bin/bash


                TIMESTAMP=$(date +"%F")

                BACKUP_DIR="/home/ubuntu/sql_dump/"

                MYSQL_USER="root"

                MYSQL=/usr/bin/mysql

                MYSQL_PASSWORD="password"

                MYSQLDUMP=/usr/bin/mysqldump

                mkdir -p "$BACKUP_DIR"

                databases=`$MYSQL --user=$MYSQL_USER -p$MYSQL_PASSWORD -e "SHOW DATABASES;"
                | grep -Ev "(Database|mysql|sys|information_schema|performance_schema)"`

                for db in $databases; do

                $MYSQLDUMP --single-transaction --routines --triggers --force --opt
                --user=$MYSQL_USER -p$MYSQL_PASSWORD --databases $db | gzip > "$BACKUP_DIR/"$db"_"$TIMESTAMP"_.gz"

                done

                '
            - path: /etc/cron.daily/sql_dump_clenup
              permissions: 493
              content: '#!/bin/bash

                /usr/bin/find /home/ubuntu/sql_dump/ -mtime +30 -name "*.gz" -exec
                /bin/rm {} \;

                '
          - - path /etc/tmp/test
        runcmd:
        - sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo server-id = 1 >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo log_bin = /var/log/mysql/mysql-bin.log >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo max_binlog_size = 100M >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo relay_log = /var/log/mysql/mysql-relay-bin >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo relay_log_index = /var/log/mysql/mysql-relay-bin.index >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - systemctl restart mariadb
        - mkdir /home/ubuntu/sql_dump
        - str_replace:
            template: 'mysql -p=password -u "root" -Bse "CREATE USER ''replication''@''!SECONDARY_IP!''
              IDENTIFIED BY ''!REPL_PASS!''; GRANT REPLICATION SLAVE ON *.* TO ''replication''@''!SECONDARY_IP!'';"

              '
            params:
              '!SECONDARY_IP!':
                get_attr:
                - secondary_port
                - fixed_ips
                - 0
                - ip_address
              '!REPL_PASS!':
                get_attr:
                - repl_password
                - value
  repdbprimaryserver:
    type: OS::Nova::Server
    depends_on:
    - primary_port
    condition: create_repdb_res
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - primary_db
      flavor:
        get_param: db_flavor
      block_device_mapping:
      - device_name: vda
        delete_on_termination: true
        volume_id:
          get_resource: root_volume_pri
      networks:
      - port:
          get_resource: primary_port
      key_name:
        get_param: key
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: repdbprimaryconfig
  repdbsecondconfig:
    type: OS::Heat::CloudConfig
    condition: create_repdb_res
    properties:
      cloud_config:
        package_upgrade: true
        packages:
        - mariadb-server
        package_update: true
        package_reboot_if_required: true
        ssh_pwauth: false
        chpasswd:
          expire: false
        password: ubuntu
        runcmd:
        - sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo server-id = 2 >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo log_bin = /var/log/mysql/mysql-bin.log >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo max_binlog_size = 100M >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo relay_log = /var/log/mysql/mysql-relay-bin >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - echo relay_log_index = /var/log/mysql/mysql-relay-bin.index >> /etc/mysql/mariadb.conf.d/50-server.cnf
        - systemctl restart mariadb
        - str_replace:
            template: 'mysql -p=password -u "root" -Bse "CHANGE MASTER TO MASTER_HOST
              = ''!PRIMARY_IP!'', MASTER_USER = ''replication'', MASTER_PASSWORD =
              ''!REPL_PASS!'', MASTER_LOG_FILE = ''mysql-bin.000001'';"

              '
            params:
              '!PRIMARY_IP!':
                get_attr:
                - primary_port
                - fixed_ips
                - 0
                - ip_address
              '!REPL_PASS!':
                get_attr:
                - repl_password
                - value
        - mysql -p=password -u "root" -Bse "start slave";
  repdbsecondserver:
    type: OS::Nova::Server
    condition: create_repdb_res
    properties:
      availability_zone:
        get_param: availability_zone
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - secondary_db
      flavor:
        get_param: db_flavor
      block_device_mapping:
      - device_name: vda
        delete_on_termination: true
        volume_id:
          get_resource: root_volume_sec
      networks:
      - port:
          get_resource: secondary_port
      key_name:
        get_param: key
      user_data_format: SOFTWARE_CONFIG
      user_data:
        get_resource: repdbsecondconfig
  primary_port:
    type: OS::Neutron::Port
    condition: create_repdb_res
    properties:
      network:
        get_param: local_net
      name: primaryport
      security_groups:
      - get_resource: sec_ssh
      - get_resource: sec_sql
  secondary_port:
    type: OS::Neutron::Port
    condition: create_repdb_res
    properties:
      network:
        get_param: local_net
      name: secondaryport
      security_groups:
      - get_resource: sec_ssh
      - get_resource: sec_sql
  sec_sql:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - db
      rules:
      - protocol: tcp
        port_range_min: 3306
        port_range_max: 3306
        remote_ip_prefix: 0.0.0.0/0
  sec_ssh:
    type: OS::Neutron::SecurityGroup
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - ssh
      rules:
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
        remote_ip_prefix: 0.0.0.0/0
  root_volume_pri:
    type: OS::Cinder::Volume
    condition: create_repdb_res
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - pri
      size: 20
      volume_type:
        get_param: disk_type
      image: ubuntu-jammy-22-x86_64
  root_volume_sec:
    type: OS::Cinder::Volume
    condition: create_repdb_res
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - sec
      size: 20
      volume_type:
        get_param: disk_type
      image: ubuntu-jammy-22-x86_64
  root_volume:
    type: OS::Cinder::Volume
    condition:
      equals:
      - get_param: replication
      - false
    properties:
      name:
        list_join:
        - _
        - - get_param: OS::stack_name
          - db
      size: 20
      volume_type:
        get_param: disk_type
      image: ubuntu-jammy-22-x86_64
  cron_name:
    type: OS::Heat::RandomString
    properties:
      salt:
        get_param: OS::stack_name
  volume_backup1:
    type: OS::Mistral::CronTrigger
    condition:
      and:
      - equals:
        - get_param: replication
        - true
      - equals:
        - get_param: backup
        - true
    properties:
      name:
        str_replace:
          template: mariadb-pri-$name
          params:
            $name:
              get_attr:
              - cron_name
              - value
      pattern: 0 0 * * *
      workflow:
        name: 370a2bfd-4013-457b-b214-d06a510ce74c
        input:
          volume_id:
            get_resource: root_volume_pri
          incremental: false
          force: true
          container: volumebackups
          delete_backups_whose_age_more_than_or_equal_days:
            get_param: backup_days
  volume_backup2:
    type: OS::Mistral::CronTrigger
    condition:
      and:
      - equals:
        - get_param: replication
        - false
      - equals:
        - get_param: backup
        - true
    properties:
      name:
        str_replace:
          template: mariadb-$name
          params:
            $name:
              get_attr:
              - cron_name
              - value
      pattern: 0 0 * * *
      workflow:
        name: 370a2bfd-4013-457b-b214-d06a510ce74c
        input:
          volume_id:
            get_resource: root_volume
          incremental: false
          force: true
          container: volumebackups
          delete_backups_whose_age_more_than_or_equal_days:
            get_param: backup_days
  volume_backup3:
    type: OS::Mistral::CronTrigger
    condition:
      and:
      - equals:
        - get_param: replication
        - true
      - equals:
        - get_param: backup
        - true
    properties:
      name:
        str_replace:
          template: mariadb-sec-$name
          params:
            $name:
              get_attr:
              - cron_name
              - value
      pattern: 0 0 * * *
      workflow:
        name: 370a2bfd-4013-457b-b214-d06a510ce74c
        input:
          volume_id:
            get_resource: root_volume_sec
          incremental: false
          force: true
          container: volumebackups
          delete_backups_whose_age_more_than_or_equal_days:
            get_param: backup_days
